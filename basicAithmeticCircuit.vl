// We Have Used In This Circuit(3-bits Basic Aithmetic Circuit) The MINIMUM number Of The Follwing Components:-
// THREE OF: Full-adders because the integer is 3-bits. 
// THREE OF: Not gates for 3-bits of integer B. 
// SIX   OF: 4x1 Multiplexers.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Structural Descriptions Of The Components that used int the Circuit.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Structural Description For Half-adder.
module half_adder(input a, input b, output sum, output carry);
   // gate level design of half adder
   // xor gate takes two bits as a two inputs and the output is the sum of this two bits.
   xor(sum, a, b);
   // and gate takes two bits as a two inputs and the output is the carry of the above summition operation.
   and(carry, a, b);
endmodule
// Structural Description For Full-adder Using Two Half-adders.
module full_adder(input a, input b, input cin, output sum, output carry);
   // wire elements are used to connect output ports of first Half-adder with input ports of seconde Half-adder and or gate.
   wire sum1, carry1, carry2;
   // the first half_adder takes two bits a and b as inputs and the output is the summition of them(first sum) and the first carry.
   half_adder h1(a, b, sum1, carry1);
   // the second half_adder takes two bits first sum and third bit as inputs and the output is the total summition of the three bits(a, b, c) and the second carry.
   half_adder h2(sum1, cin, sum, carry2);
   // gate level design of full half adder.
   // or gate takes the two above carries (carry1, carry2) as input and the output is the total carry. 
   or(carry, carry1, carry2);
endmodule
// Structural Description For 4x1 Multiplexer.
module mux4x1(input i0, input i1, input i2, input i3, input s1, input s0, output y);
   // wire elements are used to connect input and output ports of the and gates with or gate.
   wire and0, and1, and2, and3, sobar, s1bar;
   // gate level design of half adder
   // this and gate takes three inputs(first input(i0) and the complement of two selectors(s1bar and s0bar) and the output is and0.
   and(and0, i0, s0bar, s1bar);
   // this and gate takes three inputs(seconde input(i1), the complement of s1 selector(s1bar) and s0 selector and the output is and1.
   and(and1, i1, s0, s1bar);
   // this and gate takes three inputs(third input(i2), the complement of s0 selector(s0bar) and s1 selector and the output is and2.
   and(and2, i2, s0bar, s1);
   // this and gate takes three inputs(fourth input(i3) and the two selectors(s1 and s0) and the output is and3.
   and(and3, i3, s0, s1);
   // the two below not gate take the two selectors (s1 and s0) as an input and the output of each not gate is the complement of selector(s0bar and s0bar).
   not(s0bar, s0);
   not(s1bar, s1);
   // this or gate takes four inputs(and0, and1, and2, and3) and the output is the output of MUX(y).
   or(y, and0, and1, and2, and3);
endmodule
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Structural Description For The 3-bits Basic Aithmetic Circuit.
module basicAithmeticCircuit(input A0, input A1, input A2, input B0, input B1, input B2, input S1, input S0, output G0, output G1, output G2);
   // wire elements are used to connect input and output ports of a module instantiation together with some other components in our design.
   wire B0bar, B1bar, B2bar, X0, X1, X2, Y0, Y1, Y2, carry1, carry2, carry3;
   // each not gate of the below gates takes one bit of the integer B (B0, B1, B2) and the output of each not gate is the complement of each bit(B0bar, B1bar and B2bar).
   not(B0bar, B0);
   not(B1bar, B1);
   not(B2bar, B2);
   // each 4x1 multiplexe of the following first three 4x1 Multiplexers take four inputs(three bits of integer A(A0, A1 and A3)) and logic 0 
   // and two selection inputs (s1 and s0) and the output is one of the four inputs(A0, A1, A3 or logic 0).
   mux4x1 mux_A1(A0, A0, A0, 1'b0, S1, S0, X0);
   mux4x1 mux_A2(A1, A1, A1, 1'b0, S1, S0, X1);
   mux4x1 mux_A3(A2, A2, A2, 1'b0, S1, S0, X2);
   // each 4x1 multiplexe of the following three 4x1 Multiplexers take four inputs logic 1 and (three bits of integer B(B0, B1 and B3)) 
   // and two selection inputs (s1 and s0) and the output is one of the four inputs (logic 1, B0, B0bar or B0bar).
   mux4x1 mux_B1(1'b1, B0, B0bar, B0bar, S1, S0, Y0);
   mux4x1 mux_B2(1'b1, B1, B1bar, B1bar, S1, S0, Y1);
   mux4x1 mux_B3(1'b1, B2, B2bar, B2bar, S1, S0, Y2);
   // each full_adder of the following three full_adders are used in our circuit to get the summition of each output bit from mux_A and mux_B1
   // and the output is the summition of this two output bits(G = X and Y) and the carry of each two bits summition operation
   // (the carry of each full_adder is the third input bit in the next full_adder. 
   // the previous carry of the first full_adder(full_adder_1) is S1 selection input.
   full_adder full_adder_1(X0, Y0, S1, G0, carry1);
   full_adder full_adder_2(X1, Y1, carry1, G1, carry2);
   full_adder full_adder_3(X2, Y2, carry2, G2, carry3);
endmodule
///////////////////////////////////////////////////////////////////////////////////////////////////
// Behavioral descriptions for basicAithmeticCircuit test bench.
module basicAithmeticCircuit_test();
   // reg elements are used to store inputs of the basicAithmeticCircuit.
   // each integer is in 3-bits A(A2, A1, A0) and B(B2, B1, B0).
   reg a0, a1, a2, b0, b1, b2, s1, s0;
   // wire elements are used to store the result of the operation that done which is integer in 3-bits G(G0, G1, G2).
   wire g0, g1, g2;
   // the input of the test bench is two signed integers in 2's complement from stored in 3-bits A(A0, A1, A2) and B(B0, B1, B2) and two selection inputs (S1 and S0) 
   // and the output is one integer stored in 3-bits.
   // if the result integer is in more 3-bits, then we will have an overflow.
   basicAithmeticCircuit test_bench(a0, a1, a2, b0, b1, b2, s1, s0, g0, g1, g2);
   initial
   begin
      // if the result number is signed integer in 2's complement from in n-bits.
      // then we have 2^(n) numbers in range
      // -(2^(n - 1))..... 0 ...... +((2^(n - 1))-1).
      $monitor($time, " A2=%b, A1=%b, A0=%b, B2=%b, B1=%b, B0=%b, S1=%b, S0=%b, G2=%b, G1=%b, G0=%b", a2, a1, a0, b2, b1, b0, s1, s0, g2, g1, g0);
      // G = A - 1 =  0(000) - 1 = -1(111)    
          a2=0; a1=0; a0=0; b2=0; b1=0; b0=0; s1=0; s0=0;
      // G = A + B =  0(000) + 0(000) = 0(000)
      #10 a2=0; a1=0; a0=0; b2=0; b1=0; b0=0; s1=0; s0=1;
      // G = A - B =  0(000) - 0(000) = 0(000)
      #10 a2=0; a1=0; a0=0; b2=0; b1=0; b0=0; s1=1; s0=0;
      //////////////////////////////////////////////////////////////////////
      // G = A - 1 =  1(001) - 1 = 0(000) 
      #10 a2=0; a1=0; a0=1; b2=0; b1=0; b0=1; s1=0; s0=0;
      // G = A + B =  0(000) + 0(001) = 1(001)
      #10 a2=0; a1=0; a0=0; b2=0; b1=0; b0=1; s1=0; s0=1;
      // G = A - B =  0(000) - 0(001) = -1(111)
      #10 a2=0; a1=0; a0=0; b2=0; b1=0; b0=1; s1=1; s0=0;
      // G = -B =  -(1(001)) = -1(111)
      #10 a2=0; a1=0; a0=0; b2=0; b1=0; b0=1; s1=1; s0=1;
      /////////////////////////////////////////////////////////////////////
      // G = A - 1 =  2(010) - 1 = 1(000)  
      #10 a2=0; a1=1; a0=0; b2=0; b1=1; b0=0; s1=0; s0=0;
      // G = A + B =  0(000) + 0(010) = 2(010)
      #10 a2=0; a1=0; a0=0; b2=0; b1=1; b0=0; s1=0; s0=1;
      // G = A - B =  0(000) - 0(010) = -2(110)
      #10 a2=0; a1=0; a0=0; b2=0; b1=1; b0=0; s1=1; s0=0;
      // G = -B =  -(2(010)) = -2(110)
      #10 a2=0; a1=0; a0=0; b2=0; b1=1; b0=0; s1=1; s0=1;
      ///////////////////////////////////////////////////////////////////////////
      // G = A - 1 =  3(011) - 1 = 2(010) 
      #10 a2=0; a1=1; a0=1; b2=0; b1=1; b0=1; s1=0; s0=0;
      // G = A + B =  0(000) + 3(011) = 3(011)
      #10 a2=0; a1=0; a0=0; b2=0; b1=1; b0=1; s1=0; s0=1;
      // G = A - B =  0(000) - 3(011) = -3(101)
      #10 a2=0; a1=0; a0=0; b2=0; b1=1; b0=1; s1=1; s0=0;
      // G = -B =  -(3(011)) = -3(101)
      #10 a2=0; a1=0; a0=0; b2=0; b1=1; b0=1; s1=1; s0=1;
      ///////////////////////////////////////////////////////////////////////////
      // G = A - 1 =  -3(101) - 1 = -4(100) 
      #10 a2=1; a1=0; a0=1; b2=1; b1=0; b0=0; s1=0; s0=0;
      // G = A + B =  0(000) + (-4(100)) = -4(100) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=0; b0=0; s1=0; s0=1;
      ///////////////////////////////////////////////////////////////////////////
      // G = A - 1 =  -2(110) - 1 = -3(101) 
      #10 a2=1; a1=1; a0=0; b2=1; b1=0; b0=1; s1=0; s0=0;
      // G = A + B =  0(000) + (-3(101)) = -3(101)
      #10 a2=0; a1=0; a0=0; b2=1; b1=0; b0=1; s1=0; s0=1;
      // G = A - B =  0(000) - (-3(101)) = 3(011)
      #10 a2=0; a1=0; a0=0; b2=1; b1=0; b0=1; s1=1; s0=0;
      // G = -B =  -(-3(101)) = 3(011)
      #10 a2=0; a1=0; a0=0; b2=1; b1=0; b0=1; s1=1; s0=1;
      ///////////////////////////////////////////////////////////////////////////
      // G = A - 1 =  -1(111) - 1 = -2(110) 
      #10 a2=1; a1=1; a0=1; b2=1; b1=1; b0=0; s1=0; s0=0;
      // G = A + B =  0(000) + (-2(110)) = -2(110) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=1; b0=0; s1=0; s0=1;
      // G = A - B =  0(000) - (-2(110)) = 2(010) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=1; b0=0; s1=1; s0=0;
      // G = -B =  -(-2(110)) = 2(010) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=1; b0=0; s1=1; s0=1;
      //////////////////////////////////////////////////////////////////////////////
      // G = A + B =  0(000) + (-1(111)) = -1(111) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=1; b0=1; s1=0; s0=1;
      // G = A - B =  0(000) - (-1(111)) = 1(001) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=1; b0=1; s1=1; s0=0;
      // G = -B =  -(-1(111)) = 1(001) 
      #10 a2=0; a1=0; a0=0; b2=1; b1=1; b0=1; s1=1; s0=1;
      ///////////////////////////////////////////////////////////////////////////////
      // G = A + B =  2(010) + (-2(110)) = 0(000)  
      #10 a2=0; a1=1; a0=0; b2=1; b1=1; b0=0; s1=0; s0=1;
      // G = A - B =  2(010) - 3(011) = -1(111)  
      #10 a2=0; a1=1; a0=0; b2=0; b1=1; b0=1; s1=1; s0=0;
      ///////////////////////////////////////////////////////////////////////////////
      // G = A + B =  2(010) + (-1(111)) = 1(001)  
      #10 a2=0; a1=1; a0=0; b2=1; b1=1; b0=1; s1=0; s0=1;
      // G = A - B =  2(010) - (-1(111)) = 3(011)  
      #10 a2=0; a1=1; a0=0; b2=1; b1=1; b0=1; s1=1; s0=0;
      ///////////////////////////////////////////////////////////////////////////////
      // G = A + B =  -1(111) + (-3(101)) = 4(100)  
      #10 a2=1; a1=1; a0=1; b2=1; b1=0; b0=1; s1=0; s0=1;
      // G = A - B =  -1(111) - (-3(101)) = 2(010)  
      #10 a2=1; a1=1; a0=1; b2=1; b1=0; b0=1; s1=1; s0=0;
      ///////////////////////////////////////////////////////////////////////////////////
      // G = A + B =  -1(111) + (-2(110)) = -3(101)  
      #10 a2=1; a1=1; a0=1; b2=1; b1=1; b0=0; s1=0; s0=1;
      // G = A - B =  -1(111) - (-2(101)) = 1(001)  
      #10 a2=1; a1=1; a0=1; b2=1; b1=1; b0=0; s1=1; s0=0;
      ///////////////////////////////////////////////////////////////////////////////////
      // G = A + B =  1(001) + 1(001) = 2(010)  
      #10 a2=0; a1=0; a0=1; b2=0; b1=0; b0=1; s1=0; s0=1;
      // G = A - B =  1(001) - 1(001) = 0(000)  
      #10 a2=0; a1=0; a0=1; b2=0; b1=0; b0=1; s1=1; s0=0;
      ///////////////////////////////////////////////////////////////////////////////////
      // G = A + B =  1(001) + 3(011)) = -4(100)  
      #10 a2=0; a1=0; a0=1; b2=0; b1=1; b0=1; s1=0; s0=1;
      // G = A + B =  1(001) + (-4(100)) = -3(101)  
      #10 a2=0; a1=0; a0=1; b2=1; b1=0; b0=0; s1=0; s0=1;
      // G = A - B =  1(001) - 3(011) = -2(110)  
      #10 a2=0; a1=0; a0=1; b2=0; b1=1; b0=1; s1=1; s0=0;
      $finish;
   end
endmodule
